package util;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.PrintStream;import java.util.Enumeration;import java.util.Map;import java.util.Properties;import java.util.ResourceBundle;import java.util.TreeMap;import org.testng.annotations.Test;public class ConfigUitl {		private static ResourceBundle resourceBundle = null;		public static String readConfig(String fileName , String keyName){		resourceBundle = ResourceBundle.getBundle(fileName);		return resourceBundle.getString(keyName);	}			public static void main(String[] args){		listKeyValue("test.properties");		Map<String,String> keyValueMap = new TreeMap<String,String>();		keyValueMap.put("key1", "this is key1 value ");		keyValueMap.put("key2", "this is key2 value");		keyValueMap.put("key3", "this is key3 value");		storeConfigByProperty("test.properties",keyValueMap);		listKeyValue("test.properties");		keyValueMap.clear();		keyValueMap.put("key3", "this is new key3 value");		storeConfigByProperty("test.properties",keyValueMap);		listKeyValue("test.properties");		//		System.out.println(updateConfigByProperty("userInfo.properties",keyValueMap));//		listKeyValue("userInfo.properties");	}		public static boolean updateConfigByProperty(String filename, Map<String,String> keyValueMap){		        Properties p = new Properties();  	        for(String key: keyValueMap.keySet()){	    	   p.setProperty(key, keyValueMap.get(key));	        }	        File pFile = new File("resources/"+filename);  	        PrintStream fW = null ;;			try {				fW = new PrintStream(pFile);				p.list(fW);				return true;			} catch (FileNotFoundException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}			finally {				if(fW != null ) fW.close();				}	        return false;	}			public static boolean storeConfigByProperty(String filename, Map<String,String> keyValueMap){	        Properties p = new Properties();                File pFile = new File("resources/"+filename);  		try {			    InputStream fis = new FileInputStream(pFile);				p.load(fis);		        fis.close();		        for(String key: keyValueMap.keySet()){		     	   p.setProperty(key, keyValueMap.get(key));		         }		        OutputStream fos = new FileOutputStream(pFile);		    	p.store(fos, "update the value");		    	fos.close();		    	return true ;		} catch (FileNotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}               return false;	}			public static String readConfigByProperty(String filename,String key){	    File pFile = new File("resources/"+filename);          FileInputStream   pInStream=null;          try {              pInStream = new FileInputStream(pFile );          } catch (FileNotFoundException e) {              e.printStackTrace();           }          Properties p = new Properties();          try {              p.load(pInStream );            } catch (IOException e) {              e.printStackTrace();           }          Enumeration<?> enu = p.propertyNames();  //取出所有的key  //        p.list(System.out) ;          while(enu.hasMoreElements())          {              String thisKey = (String)enu.nextElement();              if(thisKey.equalsIgnoreCase(key));            return p.getProperty(thisKey);          }          return "";	}		public static void listKeyValue(String filename){	    File pFile = new File("resources/"+filename);          FileInputStream   pInStream=null;          try {              pInStream = new FileInputStream(pFile );          } catch (FileNotFoundException e) {              e.printStackTrace();           }          Properties p = new Properties();          try {              p.load(pInStream );            } catch (IOException e) {              e.printStackTrace();           }          Enumeration<?> enu = p.propertyNames();  //取出所有的key  //        p.list(System.out) ;          while(enu.hasMoreElements())          {              String thisKey = (String)enu.nextElement();              System.out.println(thisKey +"=" +p.getProperty(thisKey));        }  	}		}